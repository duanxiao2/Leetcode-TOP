//给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。 
//
// 有效字符串需满足： 
//
// 
// 左括号必须用相同类型的右括号闭合。 
// 左括号必须以正确的顺序闭合。 
// 
//
// 注意空字符串可被认为是有效字符串。 
//
// 示例 1: 
//
// 输入: "()"
//输出: true
// 
//
// 示例 2: 
//
// 输入: "()[]{}"
//输出: true
// 
//
// 示例 3: 
//
// 输入: "(]"
//输出: false
// 
//
// 示例 4: 
//
// 输入: "([)]"
//输出: false
// 
//
// 示例 5: 
//
// 输入: "{[]}"
//输出: true 
// Related Topics 栈 字符串 
// 👍 1862 👎 0


import java.util.*;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public boolean isValid(String s) {
        int n = s.length();
        if(n%2==1){
            return false;
        }
        Map<Character,Character> map = new HashMap<>() {{   //向map中添加键值对的两种方式
            put(')','(');
            put(']','[');
            put('}','{');
        }
        };
//        map.put(')','(');
//        map.put(']','[');
//        map.put('}','{');
        Stack<Character> stack = new Stack<>();
        for(int i = 0;i<n;i++){  //遍历给定的括号字符串
            char c = s.charAt(i);
            if(map.containsKey(c)){  //如果遍历到的字符属于map中的键值，即给定的几种右括号：),],}
                if(stack.empty() || stack.peek()!=map.get(c)){ //如果栈空 或者 栈顶元素不等于map中键c对应的值
                                                       //即左括号，则返回false
                    return false;
                }else {  //否则栈顶元素 等于 map中键c对应的值，则栈顶元素出栈，同时删除
                    stack.pop();  
                }
            }
            else{
                stack.push(c);  //只有左括号才会入栈
            }
        }
        return stack.empty();

    }
}
//leetcode submit region end(Prohibit modification and deletion)
