//给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 
//
// 示例 1: 
//
// 输入: 123
//输出: 321
// 
//
// 示例 2: 
//
// 输入: -123
//输出: -321
// 
//
// 示例 3: 
//
// 输入: 120
//输出: 21
// 
//
// 注意: 
//
// 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。 
// Related Topics 数学 
// 👍 2194 👎 0

/*解题思路：
首先要考虑经过反转后的数字有可能会超出题目所给的数值范围，发生溢出。
32位的有符号整数，其范围为[-(2^31),(2^31)-1],即[-2147 4836 48 , 2147 4836 47]
比如:x=1234 5678 99 则其反转后为 9987 6543 21，显然超出了数值范围，负数同理。
---------------------------------------------------------------------------
对于一个数字，如256，如果想取该数字的最后一位数字，可以通过取模操作，即256%10 = 6
取去掉最后一位数字的前几位可以用整除法，即256/10=25
---------------------------------------------------------------------------
设当前计算结果为`res`，下一位为`temp`
一、考虑x经过反转后大于数值范围中最大值的情况：
    本题中数值范围的最大值为Integer.MAX_VALUE = 2147 4836 47，
    从`res * 10 + temp > MAX_VALUE`这个溢出条件来看
  - 当出现 `res > MAX_VALUE / 10` 且 `还有temp需要添加` 时，则一定溢出
  - 当出现 `res == MAX_VALUE / 10` 且 `temp > 7` 时，则一定溢出，`7`是`2^31 - 1`的个位数

  二、考虑x经过反转后小于数值范围中最小值的情况：
    本题中数值范围的最小值为Integer.MIN_VALUE = -2147 4836 48，
    - 从`res * 10 + temp < MIN_VALUE`这个溢出条件来看
  - 当出现 `res < MIN_VALUE / 10` 且 `还有temp需要添加` 时，则一定溢出
  - 当出现 `res == MIN_VALUE / 10` 且 `temp < -8` 时，则一定溢出，`8`是`-2^31`的个位数

 */

//leetcode submit region begin(Prohibit modification and deletion)

*-----------------------------------------------------------------------------------------
class Solution {
    public int reverse(int x) {
        int res = 0;
        while(x!=0){
            int temp = x%10;//每次取末尾数字
            if(res>Integer.MAX_VALUE/10 ||res==Integer.MAX_VALUE/10 && temp>7){
                return 0;
            }
            if(res<Integer.MIN_VALUE/10 ||res == Integer.MIN_VALUE/10 && temp<-8){
                return 0;
            }
            res = res*10+temp;
            x = x/10;
        }
        return res;
    }
}

*---------------------------------------------------------------------------------------------

//leetcode submit region end(Prohibit modification and deletion)
